from db import db
from llm import add_random_memories, extract_keywords
import openai
import os
import sys
from dotenv import load_dotenv
import asyncio

# Load .env settings into environment
load_dotenv()
openai.api_key = os.getenv('OPENAI_API_KEY')

# Process command line args
n = len(sys.argv)
if n > 1:
    for arg in sys.argv:
        if arg in ["help", "h", "-help", "-h"]:
            print('''
            The way I currently use this:
            - Call -test_entity, noting the resulting entity_id (should be 1)
            - Call -test_memories <entity_id> a few times, each time will add 50 random memories to the db
            - Then call -related <entity_id> "<input>", passing for input some keywords or a phrase to test embeddings relevancy matching

            Commands:
            -test_entity                        Create a simulation and sample entity, and show the entity id
            -test_memories <entity_id>          Add 50 random memories to db for <entity_id>, generated by an LLM
            -memories <entity_id>               Show all memories for an entity
            -extract_keywords "<input>"         Extract keywords from an input string using an LLM
            -related <entity_id> "<input>"      Get memories most closely related to a list of keywords by comparing embeddings
            ''')
        elif arg == "-test_entity":
            simulation_id = db.new_simulation()
            name = "Bob"
            summary = "Bob is a test entity."
            description = "Bob is a test entity who will get lots of random memories."
            entity_id = db.new_entity(simulation_id, name, summary, description)
            print("Complete, simulation_id: " + str(simulation_id) + ", entity_id: " + str(entity_id))
        elif arg == "-test_memories":
            entity_id = sys.argv[2]
            count = 50
            print("Adding " + str(count) + " random memories for entity_id " + entity_id + "...")
            asyncio.run(add_random_memories(entity_id, count))
            print("Complete")
        elif arg == "-memories":
            entity_id = sys.argv[2]
            memories = db.get_memories_for_entity(entity_id)
            for memory in memories:
                print(memory)
        elif arg == "-extract_keywords":
            input = sys.argv[2]
            print("Extracting keywords from input: '" + input + "'")
            keywords = asyncio.run(extract_keywords(input))
            print("Keywords: " + str(keywords))
        elif arg == "-related":
            # For 
            entity_id = sys.argv[2]
            input = sys.argv[3]
            print("Finding memories for entity_id " + entity_id + " related to '" + input + "'")
            limit = 10
            relevant_memories = db.find_relevant_memories_for_entity(entity_id, input, limit)
            for memory in relevant_memories:
                print("Match score: " + str(round(memory[5], 3)) + ", Keywords: " + memory[4] + ", Memory: " + memory[3])